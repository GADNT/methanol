buildscript {
  ext {
    versions = [
        'junitJupiter'    : '5.6.0',
        'junitPlatform'   : '1.6.0',
        'reactiveStreams' : '1.0.3',
        'checkerFramework': '3.1.1',
        'gson'            : '2.8.6',
        'jackson'         : '2.10.2',
        'protobuf'        : '3.11.4',
        'checkstyle'      : '8.29',
        'errorprone'      : '2.3.4',
        'brotliDec'       : '0.1.2',
        'okhttp'          : '4.4.0',
    ]

    deps = [
        'junitApi'               : "org.junit.jupiter:junit-jupiter-api:${versions.junitJupiter}",
        'junitEngine'            : "org.junit.jupiter:junit-jupiter-engine:${versions.junitJupiter}",
        'junitPlatformLauncher'  : "org.junit.platform:junit-platform-launcher:${versions.junitPlatform}",
        'reactiveStreamsTckFlow' : "org.reactivestreams:reactive-streams-tck-flow:${versions.reactiveStreams}",
        'checkerFramework'       : "org.checkerframework:checker:${versions.checkerFramework}",
        'checkerFrameworkQual'   : "org.checkerframework:checker-qual:${versions.checkerFramework}",
        'gson'                   : "com.google.code.gson:gson:${versions.gson}",
        'jacksonDatabind'        : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
        'protobufJava'           : "com.google.protobuf:protobuf-java:${versions.protobuf}",
        'protobufCompiler'       : "com.google.protobuf:protoc:${versions.protobuf}",
        'checkstyle'             : "com.puppycrawl.tools:checkstyle:${versions.checkstyle}",
        'errorprone'             : "com.google.errorprone:error_prone_core:${versions.errorprone}",
        'errorproneAnnotations'  : "com.google.errorprone:error_prone_annotations:${versions.errorprone}",
        'brotliDec'              : "org.brotli:dec:${versions.brotliDec}",
        'mockWebServer'          : "com.squareup.okhttp3:mockwebserver:${versions.okhttp}",
        'reactiveStreams'        : "org.reactivestreams:reactive-streams:${versions.reactiveStreams}",
        'reactiveStreamsExamples': "org.reactivestreams:reactive-streams-examples:${versions.reactiveStreams}",
    ]
  }
}

plugins {
  id 'org.checkerframework' version '0.4.12' apply false
  id 'org.javamodularity.moduleplugin' version '1.6.0' apply false
  id 'net.ltgt.errorprone' version '1.1.1' apply false
}

subprojects { project ->
  if (project.name.startsWith('brotli-dec')) {
    return
  }

  apply plugin: 'java-library'
  apply plugin: 'org.checkerframework'
  apply plugin: 'org.javamodularity.moduleplugin'
  apply plugin: 'checkstyle'
  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'idea'

  group = 'com.github.mizosoft.methanol'
  version = '1.0-SNAPSHOT'

  sourceCompatibility = JavaVersion.VERSION_11

  repositories {
    jcenter()
  }

  configurations {
    checkstyleConfig
  }

  dependencies {
    compileOnly deps.checkerFrameworkQual
    compileOnly deps.errorproneAnnotations
    checkerFramework deps.checkerFramework
    errorprone deps.errorprone
    checkstyleConfig dependencies.create(deps.checkstyle) {
      transitive = false
    }

    testCompileOnly deps.checkerFrameworkQual
    testCompileOnly deps.errorproneAnnotations
    testImplementation deps.junitApi
    testRuntimeOnly deps.junitEngine
    // Gradle already has the launcher, but the explicit dependency avoids a weird
    // IllegalAccessError when org.junit.platform.launcher is implied as unnamed which
    // prevents tests from running in the module path
    testRuntimeOnly deps.junitPlatformLauncher
  }

  // Add helper extensions for modular subprojects
  if (project.extensions.findByName('moduleName') != null) {
    configure(extensions) {
      add('addReads') { task, targetModule ->
        configure(task) {
          moduleOptions {
            def module = moduleName as String
            addModules += [module, targetModule]
            addReads.merge(module, targetModule) { v1, v2 -> "$v1,$v2" as String }
          }
        }
      }
      add('addOpens') { task, openedPackage, targetModule ->
        configure(task) {
          moduleOptions {
            addModules += [targetModule]
            def opensExpr = "$moduleName/$openedPackage" as String;
            addOpens.merge(opensExpr, targetModule) { v1, v2 -> "$v1,$v2" as String }
          }
        }
      }
    }
  }

  checkerFramework {
    excludeTests = true
    if (System.properties.containsKey('checkerframework')) {
      checkers = [
          // 'org.checkerframework.checker.nullness.NullnessChecker'
      ]
    }
  }

  checkstyle {
    toolVersion = versions.checkstyle
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
    sourceSets = [project.sourceSets.main]
  }

  tasks.withType(Checkstyle) {
    enabled = System.properties.containsKey('checkstyle')
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'utf-8'
    options.errorprone {
      enabled = System.properties.containsKey('errorprone')
      disable('FutureReturnValueIgnored') // https://github.com/google/error-prone/issues/1157
    }
  }

  compileTestJava {
    options.errorprone.enabled = false
  }

  tasks.withType(Test) {
    testLogging {
      events = ['skipped', 'failed']
      showStandardStreams = true
      exceptionFormat = 'full'
    }
  }

  test {
    useJUnitPlatform()
  }
}
