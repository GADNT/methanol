buildscript {
  ext.versions = [
      'junit'           : '5.5.2',
      'junitPlatform'   : '1.3.1',
      'reactiveStreams' : '1.0.3',
      'checkerFramework': '3.0.0',
      'modulePlugin'    : '1.6.0',
      'gson'            : '2.8.6',
      'jackson'         : '2.10.2'
  ]

  ext.deps = [
      'junitApi'              : "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
      'junitEngine'           : "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
      'junitPlatformLauncher' : "org.junit.platform:junit-platform-launcher:${versions.junitPlatform}",
      'reactiveStreamsTckFlow': "org.reactivestreams:reactive-streams-tck-flow:${versions.reactiveStreams}",
      'checkerFramework'      : "org.checkerframework:checker:${versions.checkerFramework}",
      'checkerFrameworkQual'  : "org.checkerframework:checker-qual:${versions.checkerFramework}",
      'modulePlugin'          : "org.javamodularity:moduleplugin:${versions.modulePlugin}",
      'gson'                  : "com.google.code.gson:gson:${versions.gson}",
      'jacksonDatabind'       : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  ]

  // Make consumerModule read producerModule for given task
  ext.addReads = { Iterable<?> tasks , String readModuleName ->
    configure(tasks) {
      moduleOptions {
        addModules = ["$project.moduleName", readModuleName]
        addReads = [
            ("$project.moduleName" as String): readModuleName
        ]
      }
    }
  }

  repositories {
    gradlePluginPortal()
  }

  dependencies {
    classpath deps.modulePlugin
  }
}

plugins {
  id 'org.checkerframework' version '0.4.9' apply false
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'org.checkerframework'
  apply plugin: 'org.javamodularity.moduleplugin'

  group = 'com.github.mizosoft.methanol'
  version = '1.0-SNAPSHOT'

  sourceCompatibility = JavaVersion.VERSION_11

  repositories {
    jcenter()
  }

  dependencies {
    compileOnly deps.checkerFrameworkQual
    checkerFramework deps.checkerFramework

    testCompileOnly deps.checkerFrameworkQual
    testImplementation deps.junitApi
    testRuntimeOnly deps.junitEngine
    // Gradle already has the launcher, but the explicit dependency avoids a weird
    // IllegalAccessError when org.junit.platform.launcher is implied as unnamed which
    // prevents tests from running in the module path
    testRuntimeOnly deps.junitPlatformLauncher
  }

  checkerFramework {
    checkers = [
        // 'org.checkerframework.checker.nullness.NullnessChecker'
    ]
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'utf-8'
  }

  tasks.withType(Test) {
    testLogging {
      events = ['skipped', 'failed']
      showStandardStreams = true
      exceptionFormat = 'full'
    }
  }

  test {
    useJUnitPlatform()
  }
}
