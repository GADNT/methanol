ext {
  brotliInclude = 'src/include'
  brotliCommon = 'src/common'
  brotliDec = 'src/dec'
}

library {
  baseName = 'brotlidec'
  linkage = [Linkage.STATIC]

  publicHeaders.from brotliInclude
  privateHeaders.from brotliCommon, brotliDec

  binaries.configureEach(CppStaticLibrary) {
    def compileTask = compileTask.get()

    // Had to define sources here as it doesn't work via the library DSL for some reason
    compileTask.source.from fileTree(dir: brotliCommon, include: '**/*.c')
    compileTask.source.from fileTree(dir: brotliDec, include: '**/*.c')

    def compilerArgs = compileTask.compilerArgs

    // Compile for C explicitly as gradle doesn't currently have a "c-library" plugin
    if (toolChain in Gcc || toolChain in Clang) {
      compilerArgs.addAll '-x', 'c'
    } else {
      compilerArgs.add '/TC'
    }

    // Set strict warning options for gcc (these are enabled in the main brotli repo)
    if (toolChain in Gcc || toolChain in Clang) {
      compilerArgs.addAll([
          '--pedantic-errors',
          '-Wall',
          '-Wconversion',
          '-Werror',
          '-Wextra',
          '-Wlong-long',
          '-Wmissing-declarations',
          '-Wmissing-prototypes',
          '-Wno-strict-aliasing',
          '-Wshadow',
          '-Wsign-compare'
      ])
    }

    compileTask.positionIndependentCode = true
  }
}
