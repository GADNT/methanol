description = 'provides brotli decompression for methanol'

subprojects {
  apply plugin: 'cpp-library'

  library {
    targetMachines = [
        machines.windows.x86, machines.windows.x86_64,
        machines.linux.x86, machines.linux.x86_64,
        machines.macOS.x86, machines.macOS.x86_64,
    ]
  }
}

configurations.create('jniResources') {
  canBeResolved true
  canBeConsumed false
  attributes {
    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, 'jni-runtime-resources'))
  }
}

dependencies {
  implementation project(':methanol')
  jniResources project('brotli-dec-jni')
}

def LIB_ROOT = 'native'

task buildBrotli(type: Copy) {
  from configurations.jniResources {
    include '**/stripped/*.so'
    eachFile { fileInfo ->
      // Only include os/arch segments
      def normalizedSegments = fileInfo.relativePath.segments.toList() - ['shared', 'stripped']
      fileInfo.relativePath = new RelativePath(true, normalizedSegments.toArray() as String[])
    }
    includeEmptyDirs = false
  }
  into "src/main/resources/$LIB_ROOT"
}

// Ensure jni resources are copied first if buildBrotli ran with some build task
processResources {
  mustRunAfter buildBrotli
}
